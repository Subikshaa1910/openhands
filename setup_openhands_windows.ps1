param(
    [string]$InstallType = "local",
    [string]$StabilityLevel = "stable",
    [int]$PerformanceLevel = 70,
    [bool]$EnableIdleImprovement = $false,
    [bool]$EnableVMMode = $false,
    [bool]$EnableSciFiUI = $false,
    [bool]$EnableMultiAPI = $true
)

# OpenHands Enhanced Setup Script for Windows 11
# Supports local, Docker, and Lightning Labs cloud installations

Write-Host "========================================" -ForegroundColor Cyan
Write-Host "   OpenHands Enhanced Setup Script" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

# Function to check if running as administrator
function Test-Administrator {
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
    return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

# Function to install Chocolatey if not present
function Install-Chocolatey {
    if (!(Get-Command choco -ErrorAction SilentlyContinue)) {
        Write-Host "Installing Chocolatey package manager..." -ForegroundColor Yellow
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        refreshenv
    }
}

# Function to install required dependencies
function Install-Dependencies {
    Write-Host "Installing required dependencies..." -ForegroundColor Yellow
    
    # Install Python 3.11+
    if (!(Get-Command python -ErrorAction SilentlyContinue)) {
        choco install python311 -y
    }
    
    # Install Git
    if (!(Get-Command git -ErrorAction SilentlyContinue)) {
        choco install git -y
    }
    
    # Install Node.js (for WebUI)
    if (!(Get-Command node -ErrorAction SilentlyContinue)) {
        choco install nodejs -y
    }
    
    # Install Docker if Docker installation is selected
    if ($InstallType -eq "docker") {
        if (!(Get-Command docker -ErrorAction SilentlyContinue)) {
            choco install docker-desktop -y
            Write-Host "Docker Desktop installed. Please restart your computer and run this script again." -ForegroundColor Red
            exit 1
        }
    }
    
    refreshenv
}

# Function to setup OpenHands repository
function Setup-OpenHands {
    Write-Host "Setting up OpenHands repository..." -ForegroundColor Yellow
    
    $openhandsPath = "$env:USERPROFILE\OpenHands"
    
    if (Test-Path $openhandsPath) {
        Write-Host "OpenHands directory already exists. Updating..." -ForegroundColor Green
        Set-Location $openhandsPath
        git pull origin main
        git checkout arxiv-research-improvements
        git pull origin arxiv-research-improvements
    } else {
        Write-Host "Cloning OpenHands repository..." -ForegroundColor Green
        git clone https://github.com/Subikshaa1910/openhands.git $openhandsPath
        Set-Location $openhandsPath
        git checkout arxiv-research-improvements
    }
    
    return $openhandsPath
}

# Function to create enhanced configuration
function Create-EnhancedConfig {
    param([string]$Path)
    
    Write-Host "Creating enhanced configuration..." -ForegroundColor Yellow
    
    $configContent = @"
# OpenHands Enhanced Configuration
# Generated by setup script

# Installation Settings
INSTALL_TYPE=$InstallType
STABILITY_LEVEL=$StabilityLevel
PERFORMANCE_LEVEL=$PerformanceLevel

# Feature Flags
ENABLE_IDLE_IMPROVEMENT=$($EnableIdleImprovement.ToString().ToLower())
ENABLE_VM_MODE=$($EnableVMMode.ToString().ToLower())
ENABLE_SCIFI_UI=$($EnableSciFiUI.ToString().ToLower())
ENABLE_MULTI_API=$($EnableMultiAPI.ToString().ToLower())

# Security Configuration
ADMIN_TOKEN=openhands-admin-$(Get-Random -Minimum 1000 -Maximum 9999)
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001,https://localhost:8000

# Database Configuration
DATABASE_URL=sqlite:///./openhands_enhanced.db
REDIS_URL=redis://localhost:6379

# Encryption
ENCRYPTION_KEY=$(([System.Web.Security.Membership]::GeneratePassword(32, 0)))

# ML Features
ENABLE_ML_FEATURES=true
PYTORCH_OPTIONAL=true

# Performance Settings
MAX_CONCURRENT_REQUESTS=$([math]::Floor($PerformanceLevel / 10))
REQUEST_TIMEOUT=30
MEMORY_LIMIT_GB=$([math]::Floor($PerformanceLevel / 20))

# Logging
LOG_LEVEL=INFO
LOG_FILE=logs/openhands_enhanced.log

# Rate Limiting
DEFAULT_RATE_LIMIT=$([math]::Floor($PerformanceLevel * 2))
BURST_RATE_LIMIT=$([math]::Floor($PerformanceLevel * 4))

# Idle Improvement Settings
IDLE_THRESHOLD_MINUTES=10
IDLE_IMPROVEMENT_INTERVAL=3600
AC_POWER_REQUIRED=$($EnableIdleImprovement.ToString().ToLower())

# Lightning Labs Settings
LIGHTNING_LABS_ENABLED=$($EnableVMMode.ToString().ToLower())
LIGHTNING_LABS_INSTANCE_TYPE=gpu.a10g.1x

# Sci-Fi UI Settings
EDEX_UI_ENABLED=$($EnableSciFiUI.ToString().ToLower())
EDEX_UI_PORT=3001
WORLD_MAP_API_ENABLED=true

# Multi-API Settings
MULTI_ACCOUNT_ROTATION=$($EnableMultiAPI.ToString().ToLower())
ACCOUNT_ROTATION_INTERVAL=300
"@

    $configContent | Out-File -FilePath "$Path\.env" -Encoding UTF8
}

# Function to install Python dependencies
function Install-PythonDependencies {
    param([string]$Path)
    
    Write-Host "Installing Python dependencies..." -ForegroundColor Yellow
    Set-Location $Path
    
    # Create virtual environment
    python -m venv venv
    & ".\venv\Scripts\Activate.ps1"
    
    # Upgrade pip
    python -m pip install --upgrade pip
    
    # Install requirements
    if (Test-Path "requirements.txt") {
        pip install -r requirements.txt
    }
    
    # Install additional dependencies based on features
    if ($EnableSciFiUI) {
        pip install psutil GPUtil
    }
    
    if ($EnableVMMode) {
        pip install lightning-sdk
    }
    
    # Install PyTorch optionally
    if ($StabilityLevel -eq "experimental") {
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
    }
}

# Function to setup Sci-Fi UI (eDEX-UI integration)
function Setup-SciFiUI {
    param([string]$Path)
    
    if (!$EnableSciFiUI) { return }
    
    Write-Host "Setting up Sci-Fi themed UI (eDEX-UI integration)..." -ForegroundColor Yellow
    
    $edexPath = "$Path\edex-ui"
    
    if (!(Test-Path $edexPath)) {
        git clone https://github.com/GitSquared/edex-ui.git $edexPath
    }
    
    Set-Location $edexPath
    npm install
    
    # Create OpenHands integration
    $integrationScript = @"
// OpenHands eDEX-UI Integration
const { ipcRenderer } = require('electron');
const os = require('os');
const fs = require('fs');

class OpenHandsIntegration {
    constructor() {
        this.metricsInterval = null;
        this.startMetricsCollection();
    }
    
    startMetricsCollection() {
        this.metricsInterval = setInterval(() => {
            this.collectSystemMetrics();
        }, 1000);
    }
    
    collectSystemMetrics() {
        const metrics = {
            cpu: os.loadavg(),
            memory: {
                total: os.totalmem(),
                free: os.freemem(),
                used: os.totalmem() - os.freemem()
            },
            uptime: os.uptime(),
            platform: os.platform(),
            arch: os.arch(),
            timestamp: Date.now()
        };
        
        // Send to OpenHands backend
        this.sendToOpenHands(metrics);
        
        // Update eDEX-UI display
        this.updateDisplay(metrics);
    }
    
    sendToOpenHands(metrics) {
        fetch('http://localhost:8000/api/v1/metrics', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(metrics)
        }).catch(err => console.log('OpenHands not available:', err.message));
    }
    
    updateDisplay(metrics) {
        // Update eDEX-UI with OpenHands-specific information
        const cpuUsage = ((metrics.memory.used / metrics.memory.total) * 100).toFixed(1);
        const memUsage = ((metrics.memory.used / metrics.memory.total) * 100).toFixed(1);
        
        // Display in terminal
        console.log(`OpenHands Status: CPU: ${cpuUsage}% | Memory: ${memUsage}%`);
    }
}

// Initialize integration when eDEX-UI starts
window.addEventListener('DOMContentLoaded', () => {
    new OpenHandsIntegration();
});
"@

    $integrationScript | Out-File -FilePath "$edexPath\src\classes\openhands-integration.js" -Encoding UTF8
}

# Function to create enhanced WebUI
function Create-EnhancedWebUI {
    param([string]$Path)
    
    Write-Host "Creating enhanced WebUI..." -ForegroundColor Yellow
    
    $webuiPath = "$Path\webui"
    New-Item -ItemType Directory -Path $webuiPath -Force | Out-Null
    
    # Create enhanced HTML interface
    $htmlContent = @"
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OpenHands Enhanced Control Panel</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            min-height: 100vh;
        }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .header { text-align: center; margin-bottom: 30px; }
        .header h1 { font-size: 2.5em; margin-bottom: 10px; }
        .header p { font-size: 1.2em; opacity: 0.8; }
        .control-panel { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
        .panel { 
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 20px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        .panel h3 { margin-bottom: 15px; color: #4fc3f7; }
        .option { margin-bottom: 15px; }
        .option label { display: block; margin-bottom: 5px; font-weight: 500; }
        .option select, .option input { 
            width: 100%;
            padding: 10px;
            border: none;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.9);
            color: #333;
        }
        .btn { 
            background: linear-gradient(45deg, #4fc3f7, #29b6f6);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            transition: transform 0.2s;
        }
        .btn:hover { transform: translateY(-2px); }
        .status { 
            background: rgba(76, 175, 80, 0.2);
            border-left: 4px solid #4caf50;
            padding: 15px;
            margin: 20px 0;
            border-radius: 5px;
        }
        .metrics { 
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }
        .metric { 
            text-align: center;
            background: rgba(255, 255, 255, 0.1);
            padding: 15px;
            border-radius: 10px;
        }
        .metric-value { font-size: 2em; font-weight: bold; color: #4fc3f7; }
        .metric-label { font-size: 0.9em; opacity: 0.8; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🤖 OpenHands Enhanced</h1>
            <p>Advanced AI Model Switching & System Control</p>
        </div>
        
        <div class="control-panel">
            <!-- OpenHands Improvement Panel -->
            <div class="panel">
                <h3>🚀 OpenHands Improvement</h3>
                <div class="option">
                    <label>Improvement Mode:</label>
                    <select id="improvementMode">
                        <option value="auto">Auto-Optimize</option>
                        <option value="manual">Manual Control</option>
                        <option value="scheduled">Scheduled</option>
                    </select>
                </div>
                <div class="option">
                    <label>Target Areas:</label>
                    <select id="targetAreas" multiple>
                        <option value="performance">Performance</option>
                        <option value="accuracy">Accuracy</option>
                        <option value="efficiency">Efficiency</option>
                        <option value="features">New Features</option>
                    </select>
                </div>
                <button class="btn" onclick="startImprovement()">Start Improvement</button>
            </div>
            
            <!-- Model Switching Panel -->
            <div class="panel">
                <h3>🔄 Model Switching</h3>
                <div class="option">
                    <label>Primary Provider:</label>
                    <select id="primaryProvider">
                        <option value="openrouter">OpenRouter</option>
                        <option value="groq">Groq</option>
                        <option value="cerebras">Cerebras</option>
                        <option value="huggingface">HuggingFace</option>
                    </select>
                </div>
                <div class="option">
                    <label>Fallback Strategy:</label>
                    <select id="fallbackStrategy">
                        <option value="performance">Performance-based</option>
                        <option value="cost">Cost-optimized</option>
                        <option value="availability">Availability-first</option>
                    </select>
                </div>
                <button class="btn" onclick="updateModelConfig()">Update Configuration</button>
            </div>
            
            <!-- Stability Level Panel -->
            <div class="panel">
                <h3>⚖️ Stability Level</h3>
                <div class="option">
                    <label>Current Level:</label>
                    <select id="stabilityLevel">
                        <option value="stable">Stable (Production)</option>
                        <option value="testing">Testing (Beta)</option>
                        <option value="experimental">Experimental (Alpha)</option>
                    </select>
                </div>
                <div class="option">
                    <label>Auto-rollback on errors:</label>
                    <input type="checkbox" id="autoRollback" checked>
                </div>
                <button class="btn" onclick="updateStability()">Apply Changes</button>
            </div>
            
            <!-- Performance Panel -->
            <div class="panel">
                <h3>⚡ Performance Control</h3>
                <div class="option">
                    <label>CPU Usage: <span id="cpuValue">70%</span></label>
                    <input type="range" id="cpuUsage" min="10" max="100" value="70" oninput="updateCpuValue()">
                </div>
                <div class="option">
                    <label>Memory Limit: <span id="memValue">4GB</span></label>
                    <input type="range" id="memLimit" min="1" max="16" value="4" oninput="updateMemValue()">
                </div>
                <div class="option">
                    <label>Concurrent Requests: <span id="concurrentValue">10</span></label>
                    <input type="range" id="concurrent" min="1" max="50" value="10" oninput="updateConcurrentValue()">
                </div>
                <button class="btn" onclick="applyPerformance()">Apply Settings</button>
            </div>
            
            <!-- Idle Improvement Panel -->
            <div class="panel">
                <h3>🔋 Idle Improvement</h3>
                <div class="option">
                    <label>Enable on System Idle:</label>
                    <input type="checkbox" id="systemIdle" checked>
                </div>
                <div class="option">
                    <label>Enable on VM Idle:</label>
                    <input type="checkbox" id="vmIdle">
                </div>
                <div class="option">
                    <label>Require AC Power:</label>
                    <input type="checkbox" id="acPower" checked>
                </div>
                <div class="option">
                    <label>Lightning Labs VM:</label>
                    <input type="checkbox" id="lightningVM">
                </div>
                <button class="btn" onclick="updateIdleSettings()">Save Settings</button>
            </div>
            
            <!-- Multi-API Panel -->
            <div class="panel">
                <h3>🔑 Multi-API Management</h3>
                <div class="option">
                    <label>Active Accounts:</label>
                    <select id="activeAccounts" multiple>
                        <option value="account1">OpenRouter Account 1</option>
                        <option value="account2">Groq Account 1</option>
                        <option value="account3">Cerebras Account 1</option>
                    </select>
                </div>
                <div class="option">
                    <label>Rotation Interval (minutes):</label>
                    <input type="number" id="rotationInterval" value="5" min="1" max="60">
                </div>
                <button class="btn" onclick="addAccount()">Add Account</button>
                <button class="btn" onclick="updateRotation()">Update Rotation</button>
            </div>
        </div>
        
        <!-- Status Panel -->
        <div class="status">
            <h3>📊 System Status</h3>
            <div class="metrics">
                <div class="metric">
                    <div class="metric-value" id="cpuMetric">45%</div>
                    <div class="metric-label">CPU Usage</div>
                </div>
                <div class="metric">
                    <div class="metric-value" id="memMetric">2.1GB</div>
                    <div class="metric-label">Memory</div>
                </div>
                <div class="metric">
                    <div class="metric-value" id="tempMetric">42°C</div>
                    <div class="metric-label">Temperature</div>
                </div>
                <div class="metric">
                    <div class="metric-value" id="timeMetric">--:--</div>
                    <div class="metric-label">Uptime</div>
                </div>
            </div>
        </div>
        
        <!-- Quick Actions -->
        <div class="panel" style="margin-top: 20px;">
            <h3>🎛️ Quick Actions</h3>
            <button class="btn" onclick="openSciFiUI()" style="margin: 5px;">Open Sci-Fi UI</button>
            <button class="btn" onclick="openAPIDoc()" style="margin: 5px;">API Documentation</button>
            <button class="btn" onclick="openLogs()" style="margin: 5px;">View Logs</button>
            <button class="btn" onclick="exportConfig()" style="margin: 5px;">Export Config</button>
            <button class="btn" onclick="restartSystem()" style="margin: 5px;">Restart System</button>
        </div>
    </div>
    
    <script>
        // Update value displays
        function updateCpuValue() {
            document.getElementById('cpuValue').textContent = document.getElementById('cpuUsage').value + '%';
        }
        
        function updateMemValue() {
            document.getElementById('memValue').textContent = document.getElementById('memLimit').value + 'GB';
        }
        
        function updateConcurrentValue() {
            document.getElementById('concurrentValue').textContent = document.getElementById('concurrent').value;
        }
        
        // API functions
        async function startImprovement() {
            const mode = document.getElementById('improvementMode').value;
            const areas = Array.from(document.getElementById('targetAreas').selectedOptions).map(o => o.value);
            
            try {
                const response = await fetch('/api/v1/improvement/start', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ mode, areas })
                });
                
                if (response.ok) {
                    alert('Improvement process started successfully!');
                } else {
                    alert('Failed to start improvement process');
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }
        
        async function updateModelConfig() {
            const provider = document.getElementById('primaryProvider').value;
            const strategy = document.getElementById('fallbackStrategy').value;
            
            try {
                const response = await fetch('/api/v1/models/config', {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ primaryProvider: provider, fallbackStrategy: strategy })
                });
                
                if (response.ok) {
                    alert('Model configuration updated successfully!');
                } else {
                    alert('Failed to update model configuration');
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }
        
        async function updateStability() {
            const level = document.getElementById('stabilityLevel').value;
            const autoRollback = document.getElementById('autoRollback').checked;
            
            try {
                const response = await fetch('/api/v1/system/stability', {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ level, autoRollback })
                });
                
                if (response.ok) {
                    alert('Stability level updated successfully!');
                } else {
                    alert('Failed to update stability level');
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }
        
        async function applyPerformance() {
            const cpu = document.getElementById('cpuUsage').value;
            const memory = document.getElementById('memLimit').value;
            const concurrent = document.getElementById('concurrent').value;
            
            try {
                const response = await fetch('/api/v1/system/performance', {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        cpuLimit: parseInt(cpu),
                        memoryLimit: parseInt(memory),
                        maxConcurrent: parseInt(concurrent)
                    })
                });
                
                if (response.ok) {
                    alert('Performance settings applied successfully!');
                } else {
                    alert('Failed to apply performance settings');
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }
        
        async function updateIdleSettings() {
            const systemIdle = document.getElementById('systemIdle').checked;
            const vmIdle = document.getElementById('vmIdle').checked;
            const acPower = document.getElementById('acPower').checked;
            const lightningVM = document.getElementById('lightningVM').checked;
            
            try {
                const response = await fetch('/api/v1/system/idle', {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ systemIdle, vmIdle, acPower, lightningVM })
                });
                
                if (response.ok) {
                    alert('Idle settings updated successfully!');
                } else {
                    alert('Failed to update idle settings');
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }
        
        function addAccount() {
            // Open modal for adding new API account
            const provider = prompt('Enter provider name (openrouter, groq, cerebras, etc.):');
            const apiKey = prompt('Enter API key:');
            
            if (provider && apiKey) {
                fetch('/api/v1/accounts/add', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ provider, apiKey })
                }).then(response => {
                    if (response.ok) {
                        alert('Account added successfully!');
                        location.reload();
                    } else {
                        alert('Failed to add account');
                    }
                });
            }
        }
        
        async function updateRotation() {
            const interval = document.getElementById('rotationInterval').value;
            
            try {
                const response = await fetch('/api/v1/accounts/rotation', {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ interval: parseInt(interval) })
                });
                
                if (response.ok) {
                    alert('Rotation settings updated successfully!');
                } else {
                    alert('Failed to update rotation settings');
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }
        
        // Quick action functions
        function openSciFiUI() {
            window.open('http://localhost:3001', '_blank');
        }
        
        function openAPIDoc() {
            window.open('http://localhost:8000/docs', '_blank');
        }
        
        function openLogs() {
            window.open('/api/v1/logs', '_blank');
        }
        
        function exportConfig() {
            fetch('/api/v1/config/export')
                .then(response => response.blob())
                .then(blob => {
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = 'openhands-config.json';
                    a.click();
                });
        }
        
        function restartSystem() {
            if (confirm('Are you sure you want to restart the OpenHands system?')) {
                fetch('/api/v1/system/restart', { method: 'POST' })
                    .then(() => {
                        alert('System restart initiated. Please wait...');
                        setTimeout(() => location.reload(), 5000);
                    });
            }
        }
        
        // Real-time metrics update
        function updateMetrics() {
            fetch('/api/v1/metrics')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('cpuMetric').textContent = data.cpu + '%';
                    document.getElementById('memMetric').textContent = data.memory;
                    document.getElementById('tempMetric').textContent = data.temperature + '°C';
                    document.getElementById('timeMetric').textContent = data.uptime;
                })
                .catch(error => console.log('Metrics unavailable:', error));
        }
        
        // Update metrics every 2 seconds
        setInterval(updateMetrics, 2000);
        
        // Initial metrics load
        updateMetrics();
    </script>
</body>
</html>
"@

    $htmlContent | Out-File -FilePath "$webuiPath\index.html" -Encoding UTF8
}

# Function to setup Lightning Labs integration
function Setup-LightningLabs {
    param([string]$Path)
    
    if (!$EnableVMMode) { return }
    
    Write-Host "Setting up Lightning Labs integration..." -ForegroundColor Yellow
    
    $lightningScript = @"
import os
import lightning as L
from lightning.app import CloudCompute

class OpenHandsLightningApp(L.LightningApp):
    def __init__(self):
        super().__init__()
        self.openhands_work = OpenHandsWork(
            cloud_compute=CloudCompute("gpu.a10g.1x")
        )
    
    def run(self):
        self.openhands_work.run()

class OpenHandsWork(L.LightningWork):
    def __init__(self, cloud_compute):
        super().__init__(cloud_compute=cloud_compute)
    
    def run(self):
        # Install OpenHands in Lightning environment
        os.system("pip install -r requirements.txt")
        
        # Start OpenHands with cloud configuration
        os.system("python main.py --host 0.0.0.0 --port 8000")

if __name__ == "__main__":
    app = OpenHandsLightningApp()
    app.run()
"@

    $lightningScript | Out-File -FilePath "$Path\lightning_app.py" -Encoding UTF8
}

# Function to create system monitoring service
function Create-MonitoringService {
    param([string]$Path)
    
    Write-Host "Creating system monitoring service..." -ForegroundColor Yellow
    
    $monitoringScript = @"
import psutil
import time
import json
import requests
from datetime import datetime

class SystemMonitor:
    def __init__(self):
        self.api_url = "http://localhost:8000/api/v1/metrics"
        self.running = True
    
    def get_system_metrics(self):
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        # Get GPU info if available
        gpu_info = None
        try:
            import GPUtil
            gpus = GPUtil.getGPUs()
            if gpus:
                gpu = gpus[0]
                gpu_info = {
                    'name': gpu.name,
                    'load': gpu.load * 100,
                    'memory_used': gpu.memoryUsed,
                    'memory_total': gpu.memoryTotal,
                    'temperature': gpu.temperature
                }
        except ImportError:
            pass
        
        # Get temperature
        temperature = None
        try:
            temps = psutil.sensors_temperatures()
            if temps:
                for name, entries in temps.items():
                    if entries:
                        temperature = entries[0].current
                        break
        except:
            temperature = 0
        
        return {
            'timestamp': datetime.now().isoformat(),
            'cpu': {
                'percent': cpu_percent,
                'count': psutil.cpu_count(),
                'freq': psutil.cpu_freq()._asdict() if psutil.cpu_freq() else None
            },
            'memory': {
                'total': memory.total,
                'available': memory.available,
                'percent': memory.percent,
                'used': memory.used
            },
            'disk': {
                'total': disk.total,
                'used': disk.used,
                'free': disk.free,
                'percent': (disk.used / disk.total) * 100
            },
            'gpu': gpu_info,
            'temperature': temperature,
            'uptime': time.time() - psutil.boot_time()
        }
    
    def send_metrics(self, metrics):
        try:
            response = requests.post(self.api_url, json=metrics, timeout=5)
            return response.status_code == 200
        except:
            return False
    
    def run(self):
        while self.running:
            metrics = self.get_system_metrics()
            self.send_metrics(metrics)
            time.sleep(2)  # Update every 2 seconds

if __name__ == "__main__":
    monitor = SystemMonitor()
    monitor.run()
"@

    $monitoringScript | Out-File -FilePath "$Path\system_monitor.py" -Encoding UTF8
}

# Function to create startup scripts
function Create-StartupScripts {
    param([string]$Path)
    
    Write-Host "Creating startup scripts..." -ForegroundColor Yellow
    
    # Windows startup script
    $startupScript = @"
@echo off
cd /d "$Path"
echo Starting OpenHands Enhanced...

REM Activate virtual environment
call venv\Scripts\activate.bat

REM Start system monitor in background
start /B python system_monitor.py

REM Start main application
if "$EnableSciFiUI" == "True" (
    echo Starting Sci-Fi UI...
    start /B npm start --prefix edex-ui
)

if "$EnableVMMode" == "True" (
    echo Starting Lightning Labs integration...
    start /B lightning run app lightning_app.py --cloud
) else (
    echo Starting local OpenHands...
    python main.py --host 0.0.0.0 --port 8000
)

echo OpenHands Enhanced started successfully!
echo Access the WebUI at: http://localhost:8000
if "$EnableSciFiUI" == "True" echo Sci-Fi UI available at: http://localhost:3001

pause
"@

    $startupScript | Out-File -FilePath "$Path\start_openhands.bat" -Encoding ASCII
    
    # PowerShell startup script
    $psStartupScript = @"
# OpenHands Enhanced Startup Script
param(
    [switch]`$Background
)

Set-Location "$Path"
Write-Host "Starting OpenHands Enhanced..." -ForegroundColor Green

# Activate virtual environment
& ".\venv\Scripts\Activate.ps1"

# Start system monitor
if (`$Background) {
    Start-Process python -ArgumentList "system_monitor.py" -WindowStyle Hidden
} else {
    Start-Job -ScriptBlock { python system_monitor.py }
}

# Start Sci-Fi UI if enabled
if ("$EnableSciFiUI" -eq "True") {
    Write-Host "Starting Sci-Fi UI..." -ForegroundColor Yellow
    Set-Location "edex-ui"
    if (`$Background) {
        Start-Process npm -ArgumentList "start" -WindowStyle Hidden
    } else {
        Start-Job -ScriptBlock { npm start }
    }
    Set-Location ".."
}

# Start main application
if ("$EnableVMMode" -eq "True") {
    Write-Host "Starting Lightning Labs integration..." -ForegroundColor Yellow
    lightning run app lightning_app.py --cloud
} else {
    Write-Host "Starting local OpenHands..." -ForegroundColor Yellow
    python main.py --host 0.0.0.0 --port 8000
}
"@

    $psStartupScript | Out-File -FilePath "$Path\Start-OpenHands.ps1" -Encoding UTF8
}

# Function to create desktop shortcuts
function Create-DesktopShortcuts {
    param([string]$Path)
    
    Write-Host "Creating desktop shortcuts..." -ForegroundColor Yellow
    
    $desktopPath = [Environment]::GetFolderPath("Desktop")
    
    # Main application shortcut
    $shortcutPath = "$desktopPath\OpenHands Enhanced.lnk"
    $WScriptShell = New-Object -ComObject WScript.Shell
    $shortcut = $WScriptShell.CreateShortcut($shortcutPath)
    $shortcut.TargetPath = "$Path\start_openhands.bat"
    $shortcut.WorkingDirectory = $Path
    $shortcut.IconLocation = "$Path\icon.ico"
    $shortcut.Description = "OpenHands Enhanced - AI Model Switching Platform"
    $shortcut.Save()
    
    # WebUI shortcut
    $webuiShortcutPath = "$desktopPath\OpenHands WebUI.url"
    $webuiContent = @"
[InternetShortcut]
URL=http://localhost:8000
IconFile=$Path\icon.ico
IconIndex=0
"@
    $webuiContent | Out-File -FilePath $webuiShortcutPath -Encoding ASCII
    
    # Sci-Fi UI shortcut (if enabled)
    if ($EnableSciFiUI) {
        $scifiShortcutPath = "$desktopPath\OpenHands Sci-Fi UI.url"
        $scifiContent = @"
[InternetShortcut]
URL=http://localhost:3001
IconFile=$Path\edex-ui\icon.ico
IconIndex=0
"@
        $scifiContent | Out-File -FilePath $scifiShortcutPath -Encoding ASCII
    }
}

# Main execution flow
try {
    Write-Host "Starting OpenHands Enhanced setup..." -ForegroundColor Green
    
    # Check administrator privileges
    if (!(Test-Administrator)) {
        Write-Host "ERROR: This script requires Administrator privileges." -ForegroundColor Red
        Write-Host "Please right-click and select 'Run as administrator'" -ForegroundColor Red
        exit 1
    }
    
    # Install Chocolatey and dependencies
    Install-Chocolatey
    Install-Dependencies
    
    # Setup OpenHands
    $openhandsPath = Setup-OpenHands
    
    # Create configuration
    Create-EnhancedConfig -Path $openhandsPath
    
    # Install Python dependencies
    Install-PythonDependencies -Path $openhandsPath
    
    # Setup additional features
    if ($EnableSciFiUI) {
        Setup-SciFiUI -Path $openhandsPath
    }
    
    if ($EnableVMMode) {
        Setup-LightningLabs -Path $openhandsPath
    }
    
    # Create enhanced WebUI
    Create-EnhancedWebUI -Path $openhandsPath
    
    # Create monitoring service
    Create-MonitoringService -Path $openhandsPath
    
    # Create startup scripts
    Create-StartupScripts -Path $openhandsPath
    
    # Create desktop shortcuts
    Create-DesktopShortcuts -Path $openhandsPath
    
    Write-Host ""
    Write-Host "========================================" -ForegroundColor Green
    Write-Host "   Setup completed successfully!" -ForegroundColor Green
    Write-Host "========================================" -ForegroundColor Green
    Write-Host ""
    Write-Host "OpenHands Enhanced has been installed to: $openhandsPath" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "To start OpenHands Enhanced:" -ForegroundColor Cyan
    Write-Host "1. Use the desktop shortcut 'OpenHands Enhanced'" -ForegroundColor White
    Write-Host "2. Or run: $openhandsPath\start_openhands.bat" -ForegroundColor White
    Write-Host "3. Or run: $openhandsPath\Start-OpenHands.ps1" -ForegroundColor White
    Write-Host ""
    Write-Host "Access points:" -ForegroundColor Cyan
    Write-Host "- Main WebUI: http://localhost:8000" -ForegroundColor White
    if ($EnableSciFiUI) {
        Write-Host "- Sci-Fi UI: http://localhost:3001" -ForegroundColor White
    }
    Write-Host "- API Documentation: http://localhost:8000/docs" -ForegroundColor White
    Write-Host ""
    Write-Host "Configuration file: $openhandsPath\.env" -ForegroundColor Yellow
    Write-Host ""
    
} catch {
    Write-Host ""
    Write-Host "========================================" -ForegroundColor Red
    Write-Host "   Setup failed!" -ForegroundColor Red
    Write-Host "========================================" -ForegroundColor Red
    Write-Host ""
    Write-Host "Error: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host ""
    Write-Host "Please check the error message above and try again." -ForegroundColor Yellow
    Write-Host "If the problem persists, please report it on GitHub." -ForegroundColor Yellow
    exit 1
}